{"ast":null,"code":"import { auth as firebaseAuth } from '../../firebase-cfg/firebase-config';\nexport default class AuthService {\n  async register(userCredentials) {\n    if ((userCredentials === null || userCredentials === void 0 ? void 0 : userCredentials.email) && (userCredentials === null || userCredentials === void 0 ? void 0 : userCredentials.password) === (userCredentials === null || userCredentials === void 0 ? void 0 : userCredentials.confirmPassword)) {\n      try {\n        var _result$user;\n\n        let result = await firebaseAuth.createUserWithEmailAndPassword(userCredentials.email, userCredentials.password);\n\n        if (result === null || result === void 0 ? void 0 : (_result$user = result.user) === null || _result$user === void 0 ? void 0 : _result$user.uid) {\n          return true;\n        }\n      } catch (error) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  async login(userCredentials) {\n    if ((userCredentials === null || userCredentials === void 0 ? void 0 : userCredentials.email) && (userCredentials === null || userCredentials === void 0 ? void 0 : userCredentials.password)) {\n      try {\n        var _result$user2;\n\n        let result = await firebaseAuth.signInWithEmailAndPassword(userCredentials.email, userCredentials.password);\n\n        if (result === null || result === void 0 ? void 0 : (_result$user2 = result.user) === null || _result$user2 === void 0 ? void 0 : _result$user2.uid) {\n          return true;\n        }\n      } catch (error) {\n        if (error.code === 'auth/invalid-email' || error.code === 'auth/wrong-password') {\n          return false;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  async logout() {\n    await firebaseAuth.signOut();\n    window.authContext = null;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Issa Zananiri/Desktop/jrir/React-Firebase-Auth/src/services/Authentication/AuthService.ts"],"names":["auth","firebaseAuth","AuthService","register","userCredentials","email","password","confirmPassword","result","createUserWithEmailAndPassword","user","uid","error","login","signInWithEmailAndPassword","code","logout","signOut","window","authContext"],"mappings":"AAAA,SAASA,IAAI,IAAIC,YAAjB,QAAqC,oCAArC;AAGA,eAAe,MAAMC,WAAN,CAAkB;AAC7B,QAAaC,QAAb,CAAsBC,eAAtB,EAA2E;AACvE,QAAI,CAAAA,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEC,KAAjB,KAA0B,CAAAD,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEE,QAAjB,OAA8BF,eAA9B,aAA8BA,eAA9B,uBAA8BA,eAAe,CAAEG,eAA/C,CAA9B,EAA8F;AAC1F,UAAI;AAAA;;AACA,YAAIC,MAAM,GAAG,MAAMP,YAAY,CAACQ,8BAAb,CAA4CL,eAAe,CAACC,KAA5D,EAAmED,eAAe,CAACE,QAAnF,CAAnB;;AAEA,YAAIE,MAAJ,aAAIA,MAAJ,uCAAIA,MAAM,CAAEE,IAAZ,iDAAI,aAAcC,GAAlB,EAAuB;AACnB,iBAAO,IAAP;AACH;AACJ,OAND,CAME,OAAOC,KAAP,EAAc;AACZ,eAAO,KAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH;;AAED,QAAaC,KAAb,CAAmBT,eAAnB,EAAwE;AACpE,QAAI,CAAAA,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEC,KAAjB,MAA0BD,eAA1B,aAA0BA,eAA1B,uBAA0BA,eAAe,CAAEE,QAA3C,CAAJ,EAAyD;AACrD,UAAI;AAAA;;AACA,YAAIE,MAAM,GAAG,MAAMP,YAAY,CAACa,0BAAb,CAAwCV,eAAe,CAACC,KAAxD,EAA+DD,eAAe,CAACE,QAA/E,CAAnB;;AAEA,YAAIE,MAAJ,aAAIA,MAAJ,wCAAIA,MAAM,CAAEE,IAAZ,kDAAI,cAAcC,GAAlB,EAAuB;AACnB,iBAAO,IAAP;AACH;AACJ,OAND,CAME,OAAOC,KAAP,EAAc;AACZ,YAAIA,KAAK,CAACG,IAAN,KAAe,oBAAf,IAAuCH,KAAK,CAACG,IAAN,KAAe,qBAA1D,EAAiF;AAC7E,iBAAO,KAAP;AACH;AACJ;AACJ;;AAED,WAAO,KAAP;AACH;;AAED,QAAaC,MAAb,GAAqC;AACjC,UAAMf,YAAY,CAACgB,OAAb,EAAN;AAEAC,IAAAA,MAAM,CAACC,WAAP,GAAqB,IAArB;AACH;;AAvC4B","sourcesContent":["import { auth as firebaseAuth } from '../../firebase-cfg/firebase-config';\r\nimport { IUserCredentials } from './interfaces/IUserCredentials';\r\n\r\nexport default class AuthService {\r\n    public async register(userCredentials: IUserCredentials): Promise<boolean> {\r\n        if (userCredentials?.email && userCredentials?.password === userCredentials?.confirmPassword) {\r\n            try {\r\n                let result = await firebaseAuth.createUserWithEmailAndPassword(userCredentials.email, userCredentials.password);\r\n\r\n                if (result?.user?.uid) {\r\n                    return true;\r\n                }\r\n            } catch (error) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public async login(userCredentials: IUserCredentials): Promise<boolean> {\r\n        if (userCredentials?.email && userCredentials?.password) {\r\n            try {\r\n                let result = await firebaseAuth.signInWithEmailAndPassword(userCredentials.email, userCredentials.password);\r\n\r\n                if (result?.user?.uid) {\r\n                    return true;\r\n                }\r\n            } catch (error) {\r\n                if (error.code === 'auth/invalid-email' || error.code === 'auth/wrong-password') {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public async logout(): Promise<void> {\r\n        await firebaseAuth.signOut();\r\n\r\n        window.authContext = null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}